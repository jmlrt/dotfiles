[user]
  name = Julien Mailleret
  email = 8582351+jmlrt@users.noreply.github.com
  signingkey = 92CD4B00551DB751
[credential]
  helper = cache
[push]
  default = upstream
[pull]
  rebase = true
[rebase]
  autosquash = true
[fetch]
  prune = true
[alias]
  br = branch --sort=-committerdate
  brv = branch -vv --sort=-committerdate
  ci = commit --verbose
  ca = commit --all
  co = checkout
  cp = cherry-pick
  df = diff
  dmb = "!git branch --merged | grep -v \"^\\*\" | grep -v \"^\\+\" | grep -v '^  master$' | grep -v '^  develop$' | xargs -n 1 git branch -d"
  lg = log --graph --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ar)%Creset'
  pl = pull --rebase
  pr = "!f() { git fetch origin pull/$1/head:pr/$1; }; f"
  sa = stash
  st = status -sb
  unstage = reset -q HEAD --
  discard = checkout --
  uncommit = reset --mixed HEAD~
  # stash unstaged and untracked changes
  stashwip = stash save -u -k "WIP"
  # show recent branches
  short-recent = "for-each-ref --count=25 --sort=committerdate refs/heads/ --format='%(refname:short)'"
  # fuzzy add using fzf
  fza = "!git ls-files -m -o --exclude-standard | fzf --print0 -m --preview 'git diff {}' --preview-window=top:10:wrap | xargs -0 -t -o git add --all"
  # fuzzy switch branch...  /fish/functions/fco.fish seems better
  fco = "!git short-recent | fzf --print0 | xargs -0 -t git checkout"
  # fuzzy fix staged changes into existing commit
  ffix = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git fixit `echo ${HASH} | awk '{ print $1 }'`
  # fuzzy rebase interactive choose existing commit to start from
  frebase = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git rebase -i `echo ${HASH} | awk '{ print $1 }'`^
  # fuzzy edit untracked/modified files
  fed = !FILES=`git status -s | awk '{ print $2 }' | fzf -x -m` && nvim ${FILES}
  # fuzzy edit files in conflict state
  fedconflicts = !FILES=`git status -s | grep '^[UMDA]\\{2\\} ' | awk '{ print $2 }' | fzf -x -m` && nvim ${FILES}
  # fuzzy gitgrep working tree for pattern and choose file(s) to edit
  fgrep = !sh -c 'FILES=`git grep -l -A 0 -B 0 $1 $2 | fzf -x -m` && nvim `echo ${FILES} | cut -d':' -f1 | xargs`' -
  # fuzzy select past commit, and edit current state of file(s) changed in it
  fedlog = !HASH=`git log --pretty=oneline | head -n 50 | fzf` && HASHZ=`echo ${HASH} | awk '{ print $1 }'` && FILES=`git show --pretty='format:' --name-only $HASHZ | grep -v -e '^$' | fzf -x -m` && nvim ${FILES}
  # fuzzy reset back to prior commit
  freset = !HASH=`git log --pretty=oneline | head -n 50 | fzf` && git reset --soft `echo ${HASH} | awk '{ print $1 }'`^
[pager]
  branch = false
[core]
  excludesfile = /Users/jmlrt/.gitignore_global
  editor = nvim
[diff]
  colorMoved = default
[commit]
  gpgSign = true
[tag]
  gpgSign = true
[init]
  defaultBranch = main
